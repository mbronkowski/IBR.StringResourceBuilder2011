// This file was auto-generated by ML.NET Model Builder. 

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using IBR_StringResourceBuilder2011ML.Model;
using Microsoft.VisualBasic.FileIO;

namespace IBR_StringResourceBuilder2011ML.ConsoleApp
{
    class Program
    {
        static void Main(string[] args)
        {
            var workFolder = args[0];
            File.WriteAllText(workFolder+@"result.csv", "");
            List<ModelInput> topredict = new List<ModelInput>();
            using (TextFieldParser parser = new TextFieldParser(workFolder+@"topredict.csv"))
            {
                parser.HasFieldsEnclosedInQuotes = true;
                parser.SetDelimiters(",");    
                string[] fields;
                while (!parser.EndOfData)
                {
                    try
                    {
                        fields = parser.ReadFields();
                        topredict.Add( new ModelInput()
                        {
                            Col0 = fields[0],
                            Col1=fields[1],
                            Col2 = fields[2],
                            Col3=fields[3],
                        });
                    }
                    catch (Exception e)
                    {
                        Console.WriteLine(e);
                        topredict.Add( new ModelInput()
                        {
                            Col0 = "",
                            Col1="",
                            Col2 = "",
                            Col3="",
                        });
                    }
                    
                   
                } 
            }
            // Create single instance of sample data from first line of dataset for model input
            foreach (var modelInput in topredict)
            {
                var predictionResult = ConsumeModel.Predict(modelInput);
                modelInput.Col4 = predictionResult.Prediction;
                modelInput.Precistion = (int) (predictionResult.Score.Max()*100);
            }
            using(StreamWriter sw = File.AppendText(workFolder+@"result.csv"))
            {
                foreach (var modelInput in topredict)
                {
                    sw.WriteLine(modelInput.Col4+","+modelInput.Precistion);
                }
                sw.Flush();
               
            } 

        }
    }
}
